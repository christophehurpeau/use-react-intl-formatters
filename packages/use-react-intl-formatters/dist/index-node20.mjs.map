{"version":3,"file":"index-node20.mjs","sources":["../src/hooks.ts"],"sourcesContent":["import type {\n  FormatXMLElementFn,\n  Options as IntlMessageFormatOptions,\n  PrimitiveType,\n} from \"intl-messageformat\";\nimport type { ReactNode } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport type { IntlShape, MessageDescriptor } from \"react-intl\";\nimport { useIntl } from \"react-intl\";\n\n/* formatters */\n\ninterface UseIntlFormatters {\n  // eslint-disable-next-line @typescript-eslint/method-signature-style\n  formatMessage(\n    descriptor: MessageDescriptor,\n    values?: Record<string, FormatXMLElementFn<string, string> | PrimitiveType>,\n    opts?: IntlMessageFormatOptions,\n  ): string;\n  // eslint-disable-next-line @typescript-eslint/method-signature-style\n  formatMessage(\n    descriptor: MessageDescriptor,\n    values?: Record<\n      string,\n      FormatXMLElementFn<string, ReactNode> | PrimitiveType | ReactNode\n    >,\n    opts?: IntlMessageFormatOptions,\n  ): ReactNode[];\n\n  formatDate: (\n    value: FormatDateParameters[0],\n    { format, timeZone }: UseFormattedDateOptions,\n  ) => ReturnType<IntlShape[\"formatDate\"]>;\n  formatTime: (\n    value: FormatDateParameters[0],\n    { format, timeZone }: UseFormattedTimeOptions,\n  ) => ReturnType<IntlShape[\"formatTime\"]>;\n}\n\nexport function useIntlFormatters(): UseIntlFormatters {\n  const intl = useIntl();\n\n  const formatMessage = useCallback<UseIntlFormatters[\"formatMessage\"]>(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    (descriptor, values) => intl.formatMessage(descriptor, values) as any,\n    [intl],\n  );\n  const formatDate = useCallback<UseIntlFormatters[\"formatDate\"]>(\n    (value, { format, timeZone }) =>\n      intl.formatDate(value, { format, timeZone }),\n    [intl],\n  );\n  const formatTime = useCallback<UseIntlFormatters[\"formatTime\"]>(\n    (value, { format, timeZone }) =>\n      intl.formatTime(value, { format, timeZone }),\n    [intl],\n  );\n\n  return { formatMessage, formatDate, formatTime };\n}\n\n/* message */\n\ntype FormatMessageParameters = Parameters<IntlShape[\"formatMessage\"]>;\n\nexport function useFormattedMessage(descriptor: MessageDescriptor): string;\nexport function useFormattedMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<string, FormatXMLElementFn<string, string> | PrimitiveType>,\n  deps?: unknown[],\n): string;\nexport function useFormattedMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<\n    string,\n    FormatXMLElementFn<string, ReactNode> | PrimitiveType | ReactNode\n  >,\n  deps?: unknown[],\n): ReactNode[];\nexport function useFormattedMessage(\n  descriptor: MessageDescriptor,\n  values?: FormatMessageParameters[1],\n  deps: unknown[] = [],\n): ReactNode[] | string {\n  const intlFormatters = useIntlFormatters();\n  return useMemo(() => {\n    return intlFormatters.formatMessage(descriptor, values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [descriptor, ...deps]);\n}\n\n/* date */\n\ntype IntlDateFormat = string;\ntype FormatDateParameters = Parameters<IntlShape[\"formatDate\"]>;\n\nexport interface UseFormattedDateOptions {\n  format: IntlDateFormat;\n  timeZone?: string;\n}\n\nexport function useFormattedDate(\n  value: FormatDateParameters[0],\n  { format, timeZone }: UseFormattedDateOptions,\n): ReturnType<IntlShape[\"formatDate\"]> {\n  const { formatDate } = useIntlFormatters();\n\n  return useMemo(() => {\n    return formatDate(value, { format, timeZone });\n  }, [formatDate, value, format, timeZone]);\n}\n\n/* time */\n\ntype IntlTimeFormat = string;\nexport interface UseFormattedTimeOptions {\n  format: IntlTimeFormat;\n  timeZone?: string;\n}\n\nexport function useFormattedTime(\n  value: FormatDateParameters[0],\n  { format, timeZone }: UseFormattedTimeOptions,\n): ReturnType<IntlShape[\"formatTime\"]> {\n  const { formatTime } = useIntlFormatters();\n\n  return useMemo(() => {\n    return formatTime(value, { format, timeZone });\n  }, [formatTime, value, format, timeZone]);\n}\n"],"names":["useIntlFormatters","intl","useIntl","formatMessage","useCallback","descriptor","values","formatDate","value","format","timeZone","formatTime","useFormattedMessage","deps","intlFormatters","useMemo","useFormattedDate","useFormattedTime"],"mappings":";;;AAUA;;AA6BO,SAASA,iBAAiBA,GAAsB;AACrD,EAAA,MAAMC,IAAI,GAAGC,OAAO,EAAE;EAEtB,MAAMC,aAAa,GAAGC,WAAW;AAC/B;AACA,EAAA,CAACC,UAAU,EAAEC,MAAM,KAAKL,IAAI,CAACE,aAAa,CAACE,UAAU,EAAEC,MAAM,CAAQ,EACrE,CAACL,IAAI,CACP,CAAC;AACD,EAAA,MAAMM,UAAU,GAAGH,WAAW,CAC5B,CAACI,KAAK,EAAE;IAAEC,MAAM;AAAEC,IAAAA;AAAS,GAAC,KAC1BT,IAAI,CAACM,UAAU,CAACC,KAAK,EAAE;IAAEC,MAAM;AAAEC,IAAAA;AAAS,GAAC,CAAC,EAC9C,CAACT,IAAI,CACP,CAAC;AACD,EAAA,MAAMU,UAAU,GAAGP,WAAW,CAC5B,CAACI,KAAK,EAAE;IAAEC,MAAM;AAAEC,IAAAA;AAAS,GAAC,KAC1BT,IAAI,CAACU,UAAU,CAACH,KAAK,EAAE;IAAEC,MAAM;AAAEC,IAAAA;AAAS,GAAC,CAAC,EAC9C,CAACT,IAAI,CACP,CAAC;EAED,OAAO;IAAEE,aAAa;IAAEI,UAAU;AAAEI,IAAAA;GAAY;AAClD;;AAEA;;AAkBO,SAASC,mBAAmBA,CACjCP,UAA6B,EAC7BC,MAAmC,EACnCO,IAAe,GAAG,EAAE,EACE;AACtB,EAAA,MAAMC,cAAc,GAAGd,iBAAiB,EAAE;EAC1C,OAAOe,OAAO,CAAC,MAAM;AACnB,IAAA,OAAOD,cAAc,CAACX,aAAa,CAACE,UAAU,EAAEC,MAAM,CAAC;AACvD;AACF,GAAC,EAAE,CAACD,UAAU,EAAE,GAAGQ,IAAI,CAAC,CAAC;AAC3B;;AAEA;;AAUO,SAASG,gBAAgBA,CAC9BR,KAA8B,EAC9B;EAAEC,MAAM;AAAEC,EAAAA;AAAkC,CAAC,EACR;EACrC,MAAM;AAAEH,IAAAA;GAAY,GAAGP,iBAAiB,EAAE;EAE1C,OAAOe,OAAO,CAAC,MAAM;IACnB,OAAOR,UAAU,CAACC,KAAK,EAAE;MAAEC,MAAM;AAAEC,MAAAA;AAAS,KAAC,CAAC;GAC/C,EAAE,CAACH,UAAU,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,CAAC,CAAC;AAC3C;;AAEA;;AAQO,SAASO,gBAAgBA,CAC9BT,KAA8B,EAC9B;EAAEC,MAAM;AAAEC,EAAAA;AAAkC,CAAC,EACR;EACrC,MAAM;AAAEC,IAAAA;GAAY,GAAGX,iBAAiB,EAAE;EAE1C,OAAOe,OAAO,CAAC,MAAM;IACnB,OAAOJ,UAAU,CAACH,KAAK,EAAE;MAAEC,MAAM;AAAEC,MAAAA;AAAS,KAAC,CAAC;GAC/C,EAAE,CAACC,UAAU,EAAEH,KAAK,EAAEC,MAAM,EAAEC,QAAQ,CAAC,CAAC;AAC3C;;;;"}