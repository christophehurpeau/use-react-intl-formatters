{"version":3,"file":"index-node.mjs","sources":["../src/hooks.ts"],"sourcesContent":["import type {\n  FormatXMLElementFn,\n  Options as IntlMessageFormatOptions,\n  PrimitiveType,\n} from \"intl-messageformat\";\nimport type { ReactNode } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport type { IntlShape, MessageDescriptor } from \"react-intl\";\nimport { useIntl } from \"react-intl\";\n\n/* formatters */\n\ninterface UseIntlFormatters {\n  // eslint-disable-next-line @typescript-eslint/method-signature-style\n  formatMessage(\n    descriptor: MessageDescriptor,\n    values?: Record<string, FormatXMLElementFn<string, string> | PrimitiveType>,\n    opts?: IntlMessageFormatOptions,\n  ): string;\n  // eslint-disable-next-line @typescript-eslint/method-signature-style\n  formatMessage(\n    descriptor: MessageDescriptor,\n    values?: Record<\n      string,\n      FormatXMLElementFn<string, ReactNode> | PrimitiveType | ReactNode\n    >,\n    opts?: IntlMessageFormatOptions,\n  ): ReactNode[];\n\n  formatDate: (\n    value: FormatDateParameters[0],\n    { format, timeZone }: UseFormattedDateOptions,\n  ) => ReturnType<IntlShape[\"formatDate\"]>;\n  formatTime: (\n    value: FormatDateParameters[0],\n    { format, timeZone }: UseFormattedTimeOptions,\n  ) => ReturnType<IntlShape[\"formatTime\"]>;\n}\n\nexport function useIntlFormatters(): UseIntlFormatters {\n  const intl = useIntl();\n\n  const formatMessage = useCallback<UseIntlFormatters[\"formatMessage\"]>(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    (descriptor, values) => intl.formatMessage(descriptor, values) as any,\n    [intl],\n  );\n  const formatDate = useCallback<UseIntlFormatters[\"formatDate\"]>(\n    (value, { format, timeZone }) =>\n      intl.formatDate(value, { format, timeZone }),\n    [intl],\n  );\n  const formatTime = useCallback<UseIntlFormatters[\"formatTime\"]>(\n    (value, { format, timeZone }) =>\n      intl.formatTime(value, { format, timeZone }),\n    [intl],\n  );\n\n  return { formatMessage, formatDate, formatTime };\n}\n\n/* message */\n\ntype FormatMessageParameters = Parameters<IntlShape[\"formatMessage\"]>;\n\nexport function useFormattedMessage(descriptor: MessageDescriptor): string;\nexport function useFormattedMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<string, FormatXMLElementFn<string, string> | PrimitiveType>,\n  deps?: unknown[],\n): string;\nexport function useFormattedMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<\n    string,\n    FormatXMLElementFn<string, ReactNode> | PrimitiveType | ReactNode\n  >,\n  deps?: unknown[],\n): ReactNode[];\nexport function useFormattedMessage(\n  descriptor: MessageDescriptor,\n  values?: FormatMessageParameters[1],\n  deps: unknown[] = [],\n): ReactNode[] | string {\n  const intlFormatters = useIntlFormatters();\n  return useMemo(() => {\n    return intlFormatters.formatMessage(descriptor, values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [descriptor, ...deps]);\n}\n\n/* date */\n\ntype IntlDateFormat = string;\ntype FormatDateParameters = Parameters<IntlShape[\"formatDate\"]>;\n\nexport interface UseFormattedDateOptions {\n  format: IntlDateFormat;\n  timeZone?: string;\n}\n\nexport function useFormattedDate(\n  value: FormatDateParameters[0],\n  { format, timeZone }: UseFormattedDateOptions,\n): ReturnType<IntlShape[\"formatDate\"]> {\n  const { formatDate } = useIntlFormatters();\n\n  return useMemo(() => {\n    return formatDate(value, { format, timeZone });\n  }, [formatDate, value, format, timeZone]);\n}\n\n/* time */\n\ntype IntlTimeFormat = string;\nexport interface UseFormattedTimeOptions {\n  format: IntlTimeFormat;\n  timeZone?: string;\n}\n\nexport function useFormattedTime(\n  value: FormatDateParameters[0],\n  { format, timeZone }: UseFormattedTimeOptions,\n): ReturnType<IntlShape[\"formatTime\"]> {\n  const { formatTime } = useIntlFormatters();\n\n  return useMemo(() => {\n    return formatTime(value, { format, timeZone });\n  }, [formatTime, value, format, timeZone]);\n}\n"],"names":[],"mappings":";;;AAuCO,SAAS,iBAAA,GAAuC;AACrD,EAAA,MAAM,OAAO,OAAA,EAAQ;AAErB,EAAA,MAAM,aAAA,GAAgB,WAAA;AAAA;AAAA,IAEpB,CAAC,UAAA,EAAY,MAAA,KAAW,IAAA,CAAK,aAAA,CAAc,YAAY,MAAM,CAAA;AAAA,IAC7D,CAAC,IAAI;AAAA,GACP;AACA,EAAA,MAAM,UAAA,GAAa,WAAA;AAAA,IACjB,CAAC,KAAA,EAAO,EAAE,MAAA,EAAQ,QAAA,EAAS,KACzB,IAAA,CAAK,UAAA,CAAW,KAAA,EAAO,EAAE,MAAA,EAAQ,QAAA,EAAU,CAAA;AAAA,IAC7C,CAAC,IAAI;AAAA,GACP;AACA,EAAA,MAAM,UAAA,GAAa,WAAA;AAAA,IACjB,CAAC,KAAA,EAAO,EAAE,MAAA,EAAQ,QAAA,EAAS,KACzB,IAAA,CAAK,UAAA,CAAW,KAAA,EAAO,EAAE,MAAA,EAAQ,QAAA,EAAU,CAAA;AAAA,IAC7C,CAAC,IAAI;AAAA,GACP;AAEA,EAAA,OAAO,EAAE,aAAA,EAAe,UAAA,EAAY,UAAA,EAAW;AACjD;AAoBO,SAAS,mBAAA,CACd,UAAA,EACA,MAAA,EACA,IAAA,GAAkB,EAAC,EACG;AACtB,EAAA,MAAM,iBAAiB,iBAAA,EAAkB;AACzC,EAAA,OAAO,QAAQ,MAAM;AACnB,IAAA,OAAO,cAAA,CAAe,aAAA,CAAc,UAAA,EAAY,MAAM,CAAA;AAAA,GAExD,EAAG,CAAC,UAAA,EAAY,GAAG,IAAI,CAAC,CAAA;AAC1B;AAYO,SAAS,gBAAA,CACd,KAAA,EACA,EAAE,MAAA,EAAQ,UAAS,EACkB;AACrC,EAAA,MAAM,EAAE,UAAA,EAAW,GAAI,iBAAA,EAAkB;AAEzC,EAAA,OAAO,QAAQ,MAAM;AACnB,IAAA,OAAO,UAAA,CAAW,KAAA,EAAO,EAAE,MAAA,EAAQ,UAAU,CAAA;AAAA,KAC5C,CAAC,UAAA,EAAY,KAAA,EAAO,MAAA,EAAQ,QAAQ,CAAC,CAAA;AAC1C;AAUO,SAAS,gBAAA,CACd,KAAA,EACA,EAAE,MAAA,EAAQ,UAAS,EACkB;AACrC,EAAA,MAAM,EAAE,UAAA,EAAW,GAAI,iBAAA,EAAkB;AAEzC,EAAA,OAAO,QAAQ,MAAM;AACnB,IAAA,OAAO,UAAA,CAAW,KAAA,EAAO,EAAE,MAAA,EAAQ,UAAU,CAAA;AAAA,KAC5C,CAAC,UAAA,EAAY,KAAA,EAAO,MAAA,EAAQ,QAAQ,CAAC,CAAA;AAC1C;;;;"}