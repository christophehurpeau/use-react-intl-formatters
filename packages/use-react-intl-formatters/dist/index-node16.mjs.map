{"version":3,"file":"index-node16.mjs","sources":["../src/hooks.ts"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport type { IntlShape } from 'react-intl';\nimport { useIntl } from 'react-intl';\n\n/* formatters */\n\ninterface UseIntlFormatters {\n  formatMessage: IntlShape['formatMessage'];\n  formatDate: (\n    value: FormatDateParameters[0],\n    { format, timeZone }: UseFormattedDateOptions,\n  ) => ReturnType<IntlShape['formatDate']>;\n  formatTime: (\n    value: FormatDateParameters[0],\n    { format, timeZone }: UseFormattedTimeOptions,\n  ) => ReturnType<IntlShape['formatTime']>;\n}\n\nexport function useIntlFormatters(): UseIntlFormatters {\n  const intl = useIntl();\n\n  const formatMessage = useCallback<UseIntlFormatters['formatMessage']>(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    (descriptor: any, values: any) => intl.formatMessage(descriptor, values),\n    [intl],\n  );\n  const formatDate = useCallback<UseIntlFormatters['formatDate']>(\n    (value, { format, timeZone }) =>\n      intl.formatDate(value, { format, timeZone }),\n    [intl],\n  );\n  const formatTime = useCallback<UseIntlFormatters['formatTime']>(\n    (value, { format, timeZone }) =>\n      intl.formatTime(value, { format, timeZone }),\n    [intl],\n  );\n\n  return { formatMessage, formatDate, formatTime };\n}\n\n/* message */\n\ntype FormatMessageParameters = Parameters<IntlShape['formatMessage']>;\n\nexport function useFormattedMessage(\n  descriptor: FormatMessageParameters[0],\n): string;\nexport function useFormattedMessage(\n  descriptor: FormatMessageParameters[0],\n  values: FormatMessageParameters[1],\n  deps: unknown[],\n): NonNullable<ReturnType<IntlShape['formatMessage']>>;\nexport function useFormattedMessage(\n  descriptor: FormatMessageParameters[0],\n  values?: FormatMessageParameters[1],\n  deps: unknown[] = [],\n): ReturnType<IntlShape['formatMessage']> {\n  const intlFormatters = useIntlFormatters();\n  return useMemo(() => {\n    return intlFormatters.formatMessage(descriptor, values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [descriptor, ...deps]);\n}\n\n/* date */\n\ntype IntlDateFormat = string;\ntype FormatDateParameters = Parameters<IntlShape['formatDate']>;\n\nexport interface UseFormattedDateOptions {\n  format: IntlDateFormat;\n  timeZone?: string;\n}\n\nexport function useFormattedDate(\n  value: FormatDateParameters[0],\n  { format, timeZone }: UseFormattedDateOptions,\n): ReturnType<IntlShape['formatDate']> {\n  const { formatDate } = useIntlFormatters();\n\n  return useMemo(() => {\n    return formatDate(value, { format, timeZone });\n  }, [formatDate, value, format, timeZone]);\n}\n\n/* time */\n\ntype IntlTimeFormat = string;\nexport interface UseFormattedTimeOptions {\n  format: IntlTimeFormat;\n  timeZone?: string;\n}\n\nexport function useFormattedTime(\n  value: FormatDateParameters[0],\n  { format, timeZone }: UseFormattedTimeOptions,\n): ReturnType<IntlShape['formatTime']> {\n  const { formatTime } = useIntlFormatters();\n\n  return useMemo(() => {\n    return formatTime(value, { format, timeZone });\n  }, [formatTime, value, format, timeZone]);\n}\n"],"names":["useIntlFormatters","intl","useIntl","formatMessage","useCallback","descriptor","values","formatDate","value","format","timeZone","formatTime","useFormattedMessage","deps","intlFormatters","useMemo","useFormattedDate","useFormattedTime"],"mappings":";;;AAIA;;AAcO,SAASA,iBAAiBA,GAAsB;EACrD,MAAMC,IAAI,GAAGC,OAAO,EAAE,CAAA;EAEtB,MAAMC,aAAa,GAAGC,WAAW;AAC/B;AACA,EAAA,CAACC,UAAe,EAAEC,MAAW,KAAKL,IAAI,CAACE,aAAa,CAACE,UAAU,EAAEC,MAAM,CAAC,EACxE,CAACL,IAAI,CAAC,CACP,CAAA;AACD,EAAA,MAAMM,UAAU,GAAGH,WAAW,CAC5B,CAACI,KAAK,EAAE;IAAEC,MAAM;AAAEC,IAAAA,QAAAA;AAAS,GAAC,KAC1BT,IAAI,CAACM,UAAU,CAACC,KAAK,EAAE;IAAEC,MAAM;AAAEC,IAAAA,QAAAA;AAAS,GAAC,CAAC,EAC9C,CAACT,IAAI,CAAC,CACP,CAAA;AACD,EAAA,MAAMU,UAAU,GAAGP,WAAW,CAC5B,CAACI,KAAK,EAAE;IAAEC,MAAM;AAAEC,IAAAA,QAAAA;AAAS,GAAC,KAC1BT,IAAI,CAACU,UAAU,CAACH,KAAK,EAAE;IAAEC,MAAM;AAAEC,IAAAA,QAAAA;AAAS,GAAC,CAAC,EAC9C,CAACT,IAAI,CAAC,CACP,CAAA;EAED,OAAO;IAAEE,aAAa;IAAEI,UAAU;AAAEI,IAAAA,UAAAA;GAAY,CAAA;AAClD,CAAA;;AAEA;;AAYO,SAASC,mBAAmBA,CACjCP,UAAsC,EACtCC,MAAmC,EACnCO,IAAe,GAAG,EAAE,EACoB;EACxC,MAAMC,cAAc,GAAGd,iBAAiB,EAAE,CAAA;EAC1C,OAAOe,OAAO,CAAC,MAAM;AACnB,IAAA,OAAOD,cAAc,CAACX,aAAa,CAACE,UAAU,EAAEC,MAAM,CAAC,CAAA;AACvD;AACF,GAAC,EAAE,CAACD,UAAU,EAAE,GAAGQ,IAAI,CAAC,CAAC,CAAA;AAC3B,CAAA;;AAEA;;AAUO,SAASG,gBAAgBA,CAC9BR,KAA8B,EAC9B;EAAEC,MAAM;AAAEC,EAAAA,QAAAA;AAAkC,CAAC,EACR;EACrC,MAAM;AAAEH,IAAAA,UAAAA;GAAY,GAAGP,iBAAiB,EAAE,CAAA;EAE1C,OAAOe,OAAO,CAAC,MAAM;IACnB,OAAOR,UAAU,CAACC,KAAK,EAAE;MAAEC,MAAM;AAAEC,MAAAA,QAAAA;AAAS,KAAC,CAAC,CAAA;GAC/C,EAAE,CAACH,UAAU,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,CAAC,CAAC,CAAA;AAC3C,CAAA;;AAEA;;AAQO,SAASO,gBAAgBA,CAC9BT,KAA8B,EAC9B;EAAEC,MAAM;AAAEC,EAAAA,QAAAA;AAAkC,CAAC,EACR;EACrC,MAAM;AAAEC,IAAAA,UAAAA;GAAY,GAAGX,iBAAiB,EAAE,CAAA;EAE1C,OAAOe,OAAO,CAAC,MAAM;IACnB,OAAOJ,UAAU,CAACH,KAAK,EAAE;MAAEC,MAAM;AAAEC,MAAAA,QAAAA;AAAS,KAAC,CAAC,CAAA;GAC/C,EAAE,CAACC,UAAU,EAAEH,KAAK,EAAEC,MAAM,EAAEC,QAAQ,CAAC,CAAC,CAAA;AAC3C;;;;"}